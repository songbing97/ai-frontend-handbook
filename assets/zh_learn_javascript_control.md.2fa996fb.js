import{_ as s,o as a,c as l,N as n}from"./chunks/framework.c893c7c5.js";const d=JSON.parse('{"title":"流程控制语句","description":"","frontmatter":{},"headers":[],"relativePath":"zh/learn/javascript/control.md"}'),o={name:"zh/learn/javascript/control.md"},p=n(`<h1 id="流程控制语句" tabindex="-1">流程控制语句 <a class="header-anchor" href="#流程控制语句" aria-label="Permalink to &quot;流程控制语句&quot;">​</a></h1><h2 id="javascript的流程控制语法是怎么样的" tabindex="-1">JavaScript的流程控制语法是怎么样的？ <a class="header-anchor" href="#javascript的流程控制语法是怎么样的" aria-label="Permalink to &quot;JavaScript的流程控制语法是怎么样的？&quot;">​</a></h2><p>JavaScript中的流程控制语法包括条件语句（if-else语句、switch语句）、循环语句（for循环、while循环、do-while循环）以及异常处理语句（try-catch语句）。下面对这些语法进行简要介绍：</p><ol><li>条件语句：</li></ol><ul><li>if语句：根据条件判断是否执行特定的代码块。</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (condition) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 在条件为true时执行的代码块</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 在条件为false时执行的代码块（可选）</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>if-else语句：在条件为true时执行一个代码块，否则执行另一个代码块。</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (condition) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 在条件为true时执行的代码块</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (condition2) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 在条件2为true时执行的代码块</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 在所有条件都为false时执行的代码块（可选）</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>switch语句：根据表达式的值选择要执行的代码块。</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#A6ACCD;"> (expression) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> value1</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 在表达式等于value1时执行的代码块</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> value2</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 在表达式等于value2时执行的代码块</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 在表达式与所有case不匹配时执行的代码块（可选）</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ol start="2"><li>循环语句：</li></ol><ul><li>for循环：用于重复执行一段代码，可以在指定的条件下控制循环的次数。</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (initialization</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> condition</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> increment) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 在每次循环迭代时执行的代码块</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>while循环：在给定条件为true时重复执行一段代码，不知道循环的次数。</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> (condition) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 在条件为true时执行的代码块</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>do-while循环：在给定条件为true时重复执行一段代码，至少执行一次。</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">do</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 执行一次或多次的代码块</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> (condition)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><ul><li>break语句：终止循环或switch语句的执行。</li><li>continue语句：跳过当前循环的剩余代码，并继续下一次迭代。</li></ul><ol start="3"><li>异常处理语句：</li></ol><ul><li>try-catch语句：用于捕获和处理异常，以防止程序在出错时终止执行。</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 可能引发异常的代码块</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> (error) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 处理异常的代码块</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">finally</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 无论是否引发异常都会执行的代码块（可选）</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>这些流程控制语法提供了灵活的控制结构，允许根据不同的条件执行不同的代码块，重复执行代码块，以及处理异常情况。通过合理使用这些语法，可以实</p><p>现复杂的逻辑和流程控制，增强JavaScript程序的功能和健壮性。</p><h2 id="for-for-in-for-of-有什么区别" tabindex="-1">for for-in for-of 有什么区别？ <a class="header-anchor" href="#for-for-in-for-of-有什么区别" aria-label="Permalink to &quot;for for-in for-of 有什么区别？&quot;">​</a></h2><p>在JavaScript中，<code>for</code>、<code>for-in</code>和<code>for-of</code>是用于迭代和循环的不同语句。它们有以下区别：</p><ol><li><code>for</code> 循环： <ul><li>用于迭代指定的次数。</li><li>使用计数器变量来控制循环的次数。</li><li>通常使用 <code>i</code> 作为计数器变量名。</li><li>最常见的循环形式。</li></ul></li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> array</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 在每次循环迭代时执行的代码</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ol start="2"><li><code>for-in</code> 循环： <ul><li>用于迭代对象的可枚举属性。</li><li>遍历对象的所有属性（包括继承的属性）。</li><li>循环变量代表对象的属性名。</li></ul></li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> key </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> object) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hasOwnProperty</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 在每次循环迭代时执行的代码</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ol start="3"><li><code>for-of</code> 循环： <ul><li>用于迭代可迭代对象（如数组、字符串、Set、Map等）的元素。</li><li>遍历对象的元素而不是属性。</li><li>循环变量代表当前迭代的元素。</li></ul></li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> element </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> iterable) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 在每次循环迭代时执行的代码</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>相比而言：</p><ul><li><code>for</code> 循环适用于已知迭代次数的情况，通过计数器变量来控制循环次数。</li><li><code>for-in</code> 循环适用于遍历对象的属性，可以用于查找对象的键和值。</li><li><code>for-of</code> 循环适用于遍历可迭代对象的元素，提供更简洁的语法。</li></ul><p>在选择循环语句时，根据需要选择最适合的语句来实现特定的迭代和循环需求。</p>`,34),t=[p];function e(c,i,r,y,D,F){return a(),l("div",null,t)}const A=s(o,[["render",e]]);export{d as __pageData,A as default};
