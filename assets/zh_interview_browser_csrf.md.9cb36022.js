import{_ as e,o as a,c as i,N as r}from"./chunks/framework.c893c7c5.js";const f=JSON.parse('{"title":"CSRF","description":"","frontmatter":{},"headers":[],"relativePath":"zh/interview/browser/csrf.md"}'),o={name:"zh/interview/browser/csrf.md"},t=r('<h1 id="csrf" tabindex="-1">CSRF <a class="header-anchor" href="#csrf" aria-label="Permalink to &quot;CSRF&quot;">​</a></h1><h2 id="什么是csrf攻击" tabindex="-1">什么是CSRF攻击？ <a class="header-anchor" href="#什么是csrf攻击" aria-label="Permalink to &quot;什么是CSRF攻击？&quot;">​</a></h2><p>CSRF（Cross-Site Request Forgery，跨站请求伪造）攻击是一种常见的网络安全威胁，它利用了用户在已登录的状态下，对目标网站发起未经授权的请求。攻击者通过诱导受害者访问恶意网页或点击恶意链接，来执行攻击。</p><p>CSRF攻击的过程通常如下：</p><ol><li>受害者在目标网站A上进行登录，获得了有效的身份认证凭证（如Cookie）。</li><li>攻击者创建了一个恶意网页B，并在其中包含了对目标网站A的请求（如转账、更改密码等）。</li><li>攻击者诱导受害者访问恶意网页B，可以通过发送恶意链接、伪造电子邮件等方式进行诱导。</li><li>受害者在已登录状态下访问恶意网页B，浏览器会自动发送对目标网站A的请求，并携带受害者的身份认证凭证。</li><li>目标网站A接收到请求后，由于浏览器会自动携带凭证，会误以为该请求是受害者合法发起的，于是执行了攻击者定义的恶意操作。</li><li>CSRF攻击的危害在于，它可以在受害者不知情的情况下，以其身份执行未经授权的操作，可能导致金钱损失、账户信息泄露、密码修改、恶意程序安装等严重后果。</li></ol><p>为了防止CSRF攻击，可以采取以下一些防护措施：</p><ol><li>验证来源（Origin）：目标网站可以通过验证请求的来源（Origin）是否合法，拒绝非同源的请求。</li><li>使用随机令牌（CSRF Token）：目标网站可以在用户登录时生成一个随机的令牌，并将其嵌入到请求中。服务器在处理请求时会验证该令牌，如果不匹配则拒绝请求。</li><li>SameSite Cookie属性：将Cookie的SameSite属性设置为Strict或Lax，限制跨域请求中Cookie的发送，减少CSRF攻击的风险。</li><li>双重验证：要求用户在执行敏感操作时进行双重验证，如输入密码、提供额外的认证因素等。</li></ol><p>综合采用以上防护措施，可以有效减少CSRF攻击的风险。开发者和网站管理员应该密切关注安全问题，并确保网站的安全措施得到及时更新和修补。</p><h2 id="如何预防csrf攻击" tabindex="-1">如何预防CSRF攻击？ <a class="header-anchor" href="#如何预防csrf攻击" aria-label="Permalink to &quot;如何预防CSRF攻击？&quot;">​</a></h2><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h2>',10),l=[t];function s(c,n,h,_,S,d){return a(),i("div",null,l)}const p=e(o,[["render",s]]);export{f as __pageData,p as default};
