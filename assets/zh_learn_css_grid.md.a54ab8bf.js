import{_ as s,o as l,c as a,N as o}from"./chunks/framework.c893c7c5.js";const C=JSON.parse('{"title":"网格布局","description":"","frontmatter":{},"headers":[],"relativePath":"zh/learn/css/grid.md"}'),p={name:"zh/learn/css/grid.md"},n=o(`<h1 id="网格布局" tabindex="-1">网格布局 <a class="header-anchor" href="#网格布局" aria-label="Permalink to &quot;网格布局&quot;">​</a></h1><h2 id="什么是css网格布局-grid" tabindex="-1">什么是CSS网格布局（Grid）？ <a class="header-anchor" href="#什么是css网格布局-grid" aria-label="Permalink to &quot;什么是CSS网格布局（Grid）？&quot;">​</a></h2><p>CSS网格布局（CSS Grid Layout）是一种用于构建二维网格布局的CSS布局模块。它允许开发者将网页划分为行和列的结构，并将内容放置在网格单元格中。</p><p>CSS网格布局的主要概念包括：</p><ol><li><p>网格容器（Grid Container）：通过将一个元素的 <code>display</code> 属性设置为 <code>grid</code> 或 <code>inline-grid</code>，将该元素变为网格容器。网格容器用于包含网格项目，并创建一个新的网格布局上下文。</p></li><li><p>网格项目（Grid Item）：网格容器内的直接子元素被视为网格项目。网格项目是网格布局的基本单位，它们被放置在网格单元格中。</p></li><li><p>网格轨道（Grid Track）：网格轨道是网格的行或列。可以通过指定行轨道的数量、高度、列轨道的数量和宽度来定义网格的结构。</p></li><li><p>网格单元格（Grid Cell）：网格单元格是网格轨道的交叉点，用于放置网格项目。</p></li><li><p>网格线（Grid Line）：网格线是网格轨道的边界线，可以是水平线（行线）或垂直线（列线）。</p></li><li><p>网格区域（Grid Area）：网格区域是由一组相邻的网格单元格组成的矩形区域。</p></li></ol><p>通过使用网格容器和相关的属性，如 <code>grid-template-rows</code>、<code>grid-template-columns</code>、<code>grid-template-areas</code> 等，可以创建复杂的网格布局。开发者可以控制网格的结构、单元格的尺寸、网格项目的放置以及网格项目在网格区域中的跨越等。</p><p>CSS网格布局提供了强大的功能来实现灵活的布局和响应式设计。它在现代Web开发中得到了广泛的支持，并成为一种常用的布局技术。</p><h2 id="请举一个网格布局的例子-方便理解grid的各种属性和值。" tabindex="-1">请举一个网格布局的例子，方便理解grid的各种属性和值。 <a class="header-anchor" href="#请举一个网格布局的例子-方便理解grid的各种属性和值。" aria-label="Permalink to &quot;请举一个网格布局的例子，方便理解grid的各种属性和值。&quot;">​</a></h2><p>下面是一个示例，展示了使用 CSS 网格布局的基本属性和值来创建一个网格布局：</p><p>HTML 代码：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">container</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">item</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Item 1</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">item</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Item 2</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">item</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Item 3</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">item</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Item 4</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">item</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Item 5</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">item</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Item 6</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>CSS 代码：</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> grid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">grid-template-columns</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1fr</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1fr</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1fr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">grid-gap</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">item</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">background-color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> lightblue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">padding</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在上述示例中，我们使用了以下属性和值：</p><ol><li><p><code>display: grid;</code>：将容器元素 <code>.container</code> 设置为网格容器，启用网格布局。</p></li><li><p><code>grid-template-columns: 1fr 1fr 1fr;</code>：定义了网格的列模板，将容器划分为三个等宽的列。<code>1fr</code> 表示一个单位分数，表示剩余空间的一部分。</p></li><li><p><code>grid-gap: 10px;</code>：指定了网格单元格之间的间隙大小为 10px。</p></li><li><p><code>.item</code> 类的样式设置了一些常见的属性，如 <code>background-color: lightblue;</code>（设置背景颜色）、<code>padding: 20px;</code>（设置内边距）。</p></li></ol><p>这个例子展示了一个包含六个网格项目的网格布局。网格容器将项目平均分配到三列中，并在每个项目之间创建了 10px 的间隙。</p><p>这只是一个简单的例子，网格布局还有许多其他属性和值可以用来实现更复杂的布局需求。您可以根据具体的布局目标，使用不同的属性和值来调整网格容器和网格项目的行为和样式。</p><h2 id="grid子元素和块级元素有什么区别" tabindex="-1">Grid子元素和块级元素有什么区别？ <a class="header-anchor" href="#grid子元素和块级元素有什么区别" aria-label="Permalink to &quot;Grid子元素和块级元素有什么区别？&quot;">​</a></h2><p>Grid 子元素（Grid Item）和块级元素（Block-level Element）是两种不同的元素类型，具有一些区别。</p><ol><li><p>布局方式：</p><ul><li>Grid 子元素：Grid 子元素是位于网格容器（Grid Container）内部的直接子元素，它们参与网格布局，并根据网格布局的规则进行放置和布局。</li><li>块级元素：块级元素在常规文档流中具有块级布局，它们会自动占据父级容器的整行空间，并垂直堆叠。</li></ul></li><li><p>网格定位：</p><ul><li>Grid 子元素：Grid 子元素可以通过网格属性（如 <code>grid-row</code>、<code>grid-column</code>、<code>grid-area</code>）在网格容器内的网格单元格中进行定位。</li><li>块级元素：块级元素在常规文档流中按照自然的顺序进行布局和定位。</li></ul></li><li><p>盒模型：</p><ul><li>Grid 子元素：Grid 子元素的盒模型可以根据网格属性和其他 CSS 属性进行调整和设置，例如 <code>grid-row-gap</code>、<code>grid-column-gap</code>、<code>margin</code>、<code>padding</code> 等。</li><li>块级元素：块级元素的盒模型是固定的，它们在水平和垂直方向上占据父级容器的整个空间。</li></ul></li><li><p>布局控制：</p><ul><li>Grid 子元素：Grid 子元素可以使用网格属性和弹性属性（如 <code>flex-grow</code>、<code>flex-shrink</code>）等来控制其在网格布局中的位置和尺寸。</li><li>块级元素：块级元素的布局和样式通常通过 CSS 盒模型属性和其他布局属性来控制，例如 <code>width</code>、<code>height</code>、<code>margin</code>、<code>padding</code> 等。</li></ul></li></ol><p>需要注意的是，Grid 子元素可以是块级元素、行内元素或行内块元素，它们的具体布局和特性取决于网格布局的规则和属性设置。Grid 布局提供了一种强大而灵活的方式来实现网格化的布局，以适应各种复杂的布局需求。而块级元素在常规文档流中具有默认的布局行为，但可以通过 CSS 来进行自定义的样式和布局控制。</p><h2 id="flex和grid分别适合什么场景下使用" tabindex="-1">Flex和Grid分别适合什么场景下使用？ <a class="header-anchor" href="#flex和grid分别适合什么场景下使用" aria-label="Permalink to &quot;Flex和Grid分别适合什么场景下使用？&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">适用性</p><ul><li>Flex可以在几乎所有的场景使用，简单易用，除了跨纬度。</li><li>Grid的优势就在跨纬度，尤其是宫格的场景中。</li></ul></div><p>Flexbox（弹性盒子布局）和 CSS Grid（网格布局）是两种不同的 CSS 布局技术，适用于不同的场景。</p><p>弹性盒子布局（Flexbox）适用于以下情况：</p><ol><li><p>单维度的布局：Flexbox 适用于在一个维度上（主轴或交叉轴）对元素进行布局和对齐，如水平或垂直的列表、导航菜单等。</p></li><li><p>灵活的元素大小：Flexbox 允许元素自动调整大小以适应容器的空间，实现灵活的响应式布局。</p></li><li><p>简单的布局需求：当布局需求相对简单时，如对齐一组元素、均匀分布元素等，Flexbox 提供了简洁且易于理解的布局模型。</p></li><li><p>移动端布局：由于 Flexbox 提供了适应移动设备的灵活性和自适应性，它在移动端布局中广泛应用。</p></li></ol><p>网格布局（CSS Grid）适用于以下情况：</p><ol><li><p><strong>多维度的布局</strong>：CSS Grid 允许在两个维度上（行和列）对元素进行精确的布局和定位，实现复杂的网格结构。</p></li><li><p>网格化布局：如果你需要将页面划分为规则的网格结构，并在网格中放置元素，CSS Grid 提供了强大的功能和灵活性。</p></li><li><p>多列布局：CSS Grid 提供了更直观和方便的方式来创建多列布局，将元素在水平方向上进行分布。</p></li><li><p>复杂布局需求：当布局需求较复杂，涉及到元素的<strong>跨越</strong>、对齐和分布等多个方面时，CSS Grid 提供了更强大的布局控制和定位能力。</p></li></ol><p>综上所述，Flexbox 适用于简单的单维度布局和灵活的元素调整大小，而 CSS Grid 更适用于复杂的多维度布局和精确的网格结构。通常情况下，两者可以结合使用，根据具体的布局需求选择合适的技术。</p>`,29),e=[n];function t(c,r,i,d,D,F){return l(),a("div",null,e)}const g=s(p,[["render",t]]);export{C as __pageData,g as default};
