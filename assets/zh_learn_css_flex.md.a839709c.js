import{_ as s,o as l,c as a,N as o}from"./chunks/framework.c893c7c5.js";const C=JSON.parse('{"title":"弹性盒子布局","description":"","frontmatter":{},"headers":[],"relativePath":"zh/learn/css/flex.md"}'),n={name:"zh/learn/css/flex.md"},p=o(`<h1 id="弹性盒子布局" tabindex="-1">弹性盒子布局 <a class="header-anchor" href="#弹性盒子布局" aria-label="Permalink to &quot;弹性盒子布局&quot;">​</a></h1><h2 id="什么是弹性盒子布局" tabindex="-1">什么是弹性盒子布局？ <a class="header-anchor" href="#什么是弹性盒子布局" aria-label="Permalink to &quot;什么是弹性盒子布局？&quot;">​</a></h2><p>弹性盒子布局（Flexbox）是一种用于构建灵活且响应式布局的 CSS 布局模型。它提供了一种更加直观和方便的方式来对齐、分布和调整元素在容器内的位置和空间分配。</p><p>弹性盒子布局通过将容器元素设置为弹性容器（flex container）和子元素设置为弹性子元素（flex item），以实现灵活的布局。以下是弹性盒子布局的一些关键概念和特性：</p><ol><li><p>弹性容器（Flex Container）：</p><ul><li>通过设置容器元素的 <code>display</code> 属性为 <code>flex</code> 或 <code>inline-flex</code>，创建一个弹性容器。</li><li>弹性容器内的子元素成为弹性子元素，参与弹性布局。</li></ul></li><li><p>弹性子元素（Flex Item）：</p><ul><li>弹性容器中的直接子元素被视为弹性子元素。</li><li>弹性子元素可以水平或垂直排列，并根据弹性属性进行伸缩、对齐和分布。</li><li>弹性子元素可以设置为固定大小或自动调整大小。</li></ul></li><li><p>主轴（Main Axis）和交叉轴（Cross Axis）：</p><ul><li>弹性容器定义了一个主轴和一个交叉轴。</li><li>主轴是弹性子元素在弹性容器内的主要方向（水平或垂直）。</li><li>交叉轴是与主轴垂直的方向。</li></ul></li><li><p>弹性属性（Flex Properties）：</p><ul><li>通过设置弹性属性，可以控制弹性子元素在主轴和交叉轴上的对齐、伸缩和分布。</li><li>常用的弹性属性包括 <code>flex-direction</code>、<code>justify-content</code>、<code>align-items</code>、<code>flex-grow</code>、<code>flex-shrink</code> 等。</li></ul></li></ol><p>弹性盒子布局具有许多优点，包括适应不同屏幕尺寸和设备、自动调整元素大小、简化布局代码、轻松实现对齐和分布等。它已成为构建响应式和灵活布局的首选方法之一，并且在现代 Web 开发中得到广泛支持和应用。</p><h2 id="请举一个弹性盒子布局的例子-方便理解flex的各种属性和值。" tabindex="-1">请举一个弹性盒子布局的例子，方便理解flex的各种属性和值。 <a class="header-anchor" href="#请举一个弹性盒子布局的例子-方便理解flex的各种属性和值。" aria-label="Permalink to &quot;请举一个弹性盒子布局的例子，方便理解flex的各种属性和值。&quot;">​</a></h2><p>当使用弹性盒子布局时，可以通过调整容器和子元素的属性来实现不同的布局效果。下面是一个例子，演示了一些常用的弹性盒子属性和值：</p><p>HTML 代码：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">container</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">item</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Item 1</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">item</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Item 2</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">item</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Item 3</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">item</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Item 4</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>CSS 代码：</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> flex</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">flex-direction</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> column</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">justify-content</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> center</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">align-items</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> center</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">300px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">border</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1px</span><span style="color:#A6ACCD;"> solid </span><span style="color:#89DDFF;">#</span><span style="color:#A6ACCD;">ccc</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">item</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">flex</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">200px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">background-color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> lightblue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">margin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">padding</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在上述示例中，我们使用了以下属性和值：</p><ol><li><p><code>display: flex;</code>：将容器元素 <code>.container</code> 设置为弹性容器，启用弹性盒子布局。</p></li><li><p><code>flex-direction: column;</code>：设置主轴方向为垂直方向，使子元素在垂直方向上排列。</p></li><li><p><code>justify-content: center;</code>：在主轴上居中对齐子元素。</p></li><li><p><code>align-items: center;</code>：在交叉轴上居中对齐子元素。</p></li><li><p><code>height: 300px;</code>：设置容器的高度为 300px。</p></li><li><p><code>border: 1px solid #ccc;</code>：给容器添加一个边框，方便观察容器的尺寸。</p></li><li><p><code>.item</code> 类的样式设置了一些常见的属性，如 <code>flex: 1;</code>（使子元素平均分配剩余空间）、<code>width: 200px;</code>（设置子元素的宽度）、<code>background-color: lightblue;</code>（设置子元素的背景颜色）、<code>margin: 10px;</code> 和 <code>padding: 20px;</code>（设置子元素的外边距和内边距）。</p></li></ol><p>这个例子展示了一个垂直方向上居中对齐的弹性容器，其中包含了四个弹性子元素。子元素平均分配了剩余空间，具有相同的宽度，并且在垂直和水平方向上都居中对齐。</p><p>这只是一个简单的例子，弹性盒子布局还有许多其他属性和值可以用来实现更复杂的布局需求。您可以根据具体的布局目标，使用不同的属性和值来调整弹性容器和子元素的行为和样式。</p><h2 id="弹性子元素和块级元素有什么区别" tabindex="-1">弹性子元素和块级元素有什么区别？ <a class="header-anchor" href="#弹性子元素和块级元素有什么区别" aria-label="Permalink to &quot;弹性子元素和块级元素有什么区别？&quot;">​</a></h2><p>弹性子元素（Flex Item）和块级元素（Block-level Element）是两种不同的元素类型，具有一些区别。</p><ol><li><p>定位方式：</p><ul><li>弹性子元素：在弹性盒子布局中，弹性子元素的定位方式由弹性盒子布局的规则决定。它们根据弹性属性在弹性容器内进行排列和布局。</li><li>块级元素：块级元素在常规文档流中具有块级布局，它们会自动占据父级元素的整行空间，并垂直堆叠。</li></ul></li><li><p>盒模型：</p><ul><li>弹性子元素：弹性子元素的盒模型可以根据弹性属性进行调整和伸缩，以适应弹性容器的布局需求。它们可以根据容器的剩余空间自动调整大小。</li><li>块级元素：块级元素的盒模型是固定的，它们在水平和垂直方向上占据父级容器的整个空间。</li></ul></li><li><p>流动性：</p><ul><li>弹性子元素：弹性子元素可以在弹性容器内自由流动，根据弹性属性进行调整和分布。它们可以在主轴和交叉轴上进行对齐和对应的空间分配。</li><li>块级元素：块级元素按照常规文档流的顺序进行流动，根据文档流的规则进行布局。它们会依次占据文档流中的位置。</li></ul></li><li><p>弹性属性控制：</p><ul><li>弹性子元素：弹性子元素可以通过设置弹性属性（如 <code>flex-grow</code>、<code>flex-shrink</code>、<code>flex-basis</code>）来控制它们在弹性容器内的伸缩性、分布和对齐方式。</li><li>块级元素：块级元素的布局和样式通常通过 CSS 盒模型属性和其他布局属性来控制，例如 <code>width</code>、<code>height</code>、<code>margin</code>、<code>padding</code> 等。</li></ul></li></ol><p>需要注意的是，弹性子元素可以是块级元素、行内元素或行内块元素，它们的具体布局和特性取决于弹性盒子布局的规则和属性设置。弹性盒子布局提供了更加灵活和响应式的布局方式，使得元素的排列和分布更加便捷和可控。</p><h2 id="flex-grow-和-flex-shrink默认值为多少-逻辑是什么" tabindex="-1">flex-grow 和 flex-shrink默认值为多少，逻辑是什么？ <a class="header-anchor" href="#flex-grow-和-flex-shrink默认值为多少-逻辑是什么" aria-label="Permalink to &quot;flex-grow 和 flex-shrink默认值为多少，逻辑是什么？&quot;">​</a></h2><p><code>flex-grow</code> 和 <code>flex-shrink</code> 是弹性盒子布局中用于控制弹性子元素伸缩性的属性。</p><ul><li><code>flex-grow</code> 的默认值为 0。</li><li><code>flex-shrink</code> 的默认值为 1。</li></ul><p>逻辑如下：</p><ul><li><p><code>flex-grow</code> 决定了当弹性容器的剩余空间大于弹性子元素的总需求空间时，如何分配剩余空间给各个弹性子元素。</p><ul><li>默认值为 0 表示不扩展，弹性子元素不会分配额外的剩余空间。</li><li>如果多个弹性子元素的 <code>flex-grow</code> 值不同，剩余空间会按照各自的 <code>flex-grow</code> 值的比例进行分配。</li></ul></li><li><p><code>flex-shrink</code> 决定了当弹性容器的空间不足以容纳弹性子元素的总需求空间时，如何收缩各个弹性子元素。</p><ul><li>默认值为 1 表示等比例收缩，所有弹性子元素会按照其 <code>flex-shrink</code> 值的比例进行收缩。</li><li>如果多个弹性子元素的 <code>flex-shrink</code> 值不同，收缩的空间会按照各自的 <code>flex-shrink</code> 值的比例进行分配。</li></ul></li></ul><p>需要注意的是，这些属性的实际效果还取决于其他因素，如弹性子元素的基准大小（<code>flex-basis</code>）、弹性容器的尺寸、对齐方式等。通过调整这些属性的值，可以控制弹性子元素在弹性容器内的伸缩性和收缩性，以实现所需的布局效果。</p>`,26),e=[p];function c(t,r,i,D,F,y){return l(),a("div",null,e)}const A=s(n,[["render",c]]);export{C as __pageData,A as default};
